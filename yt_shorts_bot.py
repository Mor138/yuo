#!/usr/bin/env python3
"""
yt_shorts_bot.py ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ YouTube‚ÄëShorts
----------------------------------------------------------------------

Pipeline:
1. –ë–µ—Ä—ë—Ç —Ç–µ–º—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã/—Å–ø–∏—Å–∫–∞ (pick_topic)
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π ChatGPT (generate_script)
3. –î–µ–ª–∞–µ—Ç –∞—Å—Å–µ—Ç—ã (–∫–∞—Ä—Ç–∏–Ω–∫–∏ DALL¬∑E, –∑–≤—É–∫ TTS) ‚Äì make_assets
4. –°–∫–ª–µ–∏–≤–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ MoviePy ‚Äì build_video
5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ YouTube Data API ‚Äì upload_video
6. –õ–æ–≥–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ SQLite ‚Äì mark_done

‚öôÔ∏è  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
```
pip install --upgrade google-api-python-client google-auth google-auth-oauthlib \
            openai moviepy pillow python-dotenv tqdm
```

üîê  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ .env):
```text
OPENAI_API_KEY=sk-...
GOOGLE_CLIENT_SECRET=file://client_secret.json   # –∏–ª–∏ base64://...
CHANNEL_UPLOAD_PLAYLIST="UUxxxxxxxxxxxxxxxx"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
ELEVENLABS_API_KEY=...                          # –¥–ª—è TTS (–∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–≤–∏–∂–æ–∫)
```

üìº  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –∫–≤–æ—Ç—ã
* –ó–∞–≥—Ä—É–∑–∫–∞ `videos.insert` —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 1600 –µ–¥. –∫–≤–æ—Ç—ã (10‚ÄØ000 –±–µ—Å–ø–ª–∞—Ç–Ω–æ/—Å—É—Ç–∫–∏).  ([developers.google.com](https://developers.google.com/youtube/v3/docs/videos/insert?utm_source=chatgpt.com))
* –î–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–∏–Ω—Ç–µ—Ç–∏–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è `status.containsSyntheticMedia = true` (API¬†rev 2024‚Äë10‚Äë30).  ([developers.google.com](https://developers.google.com/youtube/v3/revision_history))

–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è Python¬†3.10+; –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å –∫—Ä–æ–Ω–æ–º –∏–ª–∏ GitHub¬†Actions.
"""

from __future__ import annotations
import os, json, random, sqlite3, tempfile, datetime, time, base64
from pathlib import Path
from typing import List, Dict

import openai
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

import sys
import subprocess

try:
    from moviepy.editor import ImageClip, AudioFileClip, concatenate_videoclips, vfx
except ModuleNotFoundError as e:
    print("[debug] failed to import moviepy:", e)
    subprocess.call([sys.executable, "-m", "pip", "list"])
    raise
from dotenv import load_dotenv
from tqdm import tqdm

# -----------------------------------------------------------
# 0. INIT & CONFIG
# -----------------------------------------------------------
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
DB = Path("bot_state.sqlite")
SCOPES = ["https://www.googleapis.com/auth/youtube.upload"]
CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET", "client_secret.json")
print("[debug] Python", sys.version)
subprocess.call([sys.executable, "-m", "pip", "--version"])

# -----------------------------------------------------------
# 1. TOPIC SOURCE
# -----------------------------------------------------------
TOPICS = [
    "–ö–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å USB‚Äë–ø–æ—Ä—Ç –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ",
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç–µ –Ω–æ—É—Ç–±—É–∫–∞",
    "–°–ø–∞—Å–µ–Ω–∏–µ SSD –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏",
    "–ü–æ—á–µ–º—É –≤–∑–¥—É–≤–∞—é—Ç—Å—è –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã –∏ –∫–∞–∫ –∏—Ö –ø–æ–¥–±–∏—Ä–∞—Ç—å" ,
    "–ü–µ—Ä–µ—Ç–æ—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤ BGA –¥–æ–º–∞"
]


def pick_new_topic() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–æ–π –µ—â—ë –Ω–µ –±—ã–ª–æ."""
    conn = sqlite3.connect(DB)
    conn.execute("CREATE TABLE IF NOT EXISTS log(topic TEXT PRIMARY KEY, dt TEXT)")
    seen = {row[0] for row in conn.execute("SELECT topic FROM log")}
    choices = [t for t in TOPICS if t not in seen]
    topic = random.choice(choices) if choices else random.choice(TOPICS)
    conn.close()
    return topic

# -----------------------------------------------------------
# 2. GPT SCRIPT
# -----------------------------------------------------------

def generate_script(topic: str) -> Dict:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É GPT JSON‚Äë—Å—Ü–µ–Ω–∞—Ä–∏–π: title, voiceover, 4‚Äë6 —Å—Ü–µ–Ω."""
    sys_prompt = (
        "–¢—ã ‚Äì YouTube‚Äë—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –î–∞–π JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–∞:\n"
        "{\"title\":..., \"voiceover\":..., \"shots\":[{\"img_prompt\":..., \"duration\": int_sec}, ...]}\n"
        "–ì–æ–≤–æ—Ä–∏ –ø–æ‚Äë—Ä—É—Å—Å–∫–∏, —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ <55¬†—Å–µ–∫, –º–∞–∫—Å–∏–º—É–º 6 —Å—Ü–µ–Ω."
    )
    resp = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": f"–¢–µ–º–∞: {topic}"},
        ],
        temperature=0.8,
    )
    content = resp.choices[0].message.content.strip()
    return json.loads(content)

# -----------------------------------------------------------
# 3. ASSET GENERATION (DALL¬∑E + TTS)
# -----------------------------------------------------------

def make_assets(script: Dict) -> (List[Path], Path):
    images = []
    for i, shot in enumerate(tqdm(script["shots"], desc="Images")):
        prompt = shot["img_prompt"] + ", cinematic, 8k, vertical"
        igen = openai.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1080x1920",
        )
        url = igen.data[0].url
        img_path = Path(tempfile.mktemp(suffix=f"_{i}.png"))
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        from urllib.request import urlretrieve
        urlretrieve(url, img_path)
        images.append(img_path)

    # ---- TTS (–ø—Ä–∏–º–µ—Ä —Å OpenAI "tts-1") ----
    audio_resp = openai.audio.speech.create(
        model="tts-1",
        voice="alloy",
        input=script["voiceover"]
    )
    voice_path = Path(tempfile.mktemp(suffix=".mp3"))
    voice_path.write_bytes(audio_resp.audio.data)
    return images, voice_path

# -----------------------------------------------------------
# 4. BUILD VIDEO
# -----------------------------------------------------------

def build_video(images: List[Path], voice: Path, out: Path, script: Dict):
    audio_clip = AudioFileClip(str(voice))
    img_clips = []
    total_duration = 0.0
    for img, shot in zip(images, script["shots"]):
        dur = shot["duration"]
        clip = (
            ImageClip(str(img))
            .set_duration(dur)
            .resize(height=1920)
            .set_position("center")
        )
        # –ª—ë–≥–∫–∏–π Ken‚ÄëBurns
        clip = clip.fx(vfx.zoom_in, 1.05)
        img_clips.append(clip)
        total_duration += dur

    video = concatenate_videoclips(img_clips, method="compose").set_audio(audio_clip)
    # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º/—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–æ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ
    audio_clip = audio_clip.set_duration(total_duration)
    video = video.set_audio(audio_clip)

    video.write_videofile(
        str(out), fps=30, codec="libx264", audio_codec="aac", bitrate="3M"
    )

# -----------------------------------------------------------
# 5. YOUTUBE AUTH & UPLOAD
# -----------------------------------------------------------

def yt_service():
    if CLIENT_SECRET.startswith("file://"):
        path = CLIENT_SECRET[7:]
    elif CLIENT_SECRET.startswith("base64://"):
        raw = CLIENT_SECRET[9:]
        path = tempfile.mktemp()
        Path(path).write_bytes(base64.b64decode(raw))
    else:
        path = CLIENT_SECRET
    flow = InstalledAppFlow.from_client_secrets_file(path, SCOPES)
    creds = flow.run_local_server(port=0)
    return build("youtube", "v3", credentials=creds)


def upload_video(path: Path, meta: Dict, yt):
    body = {
        "snippet": {
            "title": meta["title"] + " #shorts",
            "description": "AI‚Äëgenerated electronics repair tip\n#shorts",
            "tags": ["electronics", "repair", "AI", "shorts"],
            "categoryId": "28"  # Tech
        },
        "status": {
            "privacyStatus": "public",
            "containsSyntheticMedia": True  # —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏–∫—É
        }
    }
    media = MediaFileUpload(str(path), chunksize=-1, resumable=True)
    request = yt.videos().insert(part="snippet,status", body=body, media_body=media)
    response = None
    with tqdm(desc="Upload", total=100) as bar:
        while response is None:
            status, response = request.next_chunk()
            if status:
                bar.update(int(status.progress() * 100) - bar.n)
    return response["id"]

# -----------------------------------------------------------
# 6. LOGGING
# -----------------------------------------------------------

def mark_done(topic: str, video_id: str):
    conn = sqlite3.connect(DB)
    conn.execute("INSERT OR IGNORE INTO log VALUES (?,?)", (topic, video_id))
    conn.commit()
    conn.close()

def save_history(topic: str, video_id: str, dt: datetime.datetime) -> None:
    """Writes a JSON log with info about the run."""
    hist = Path("history")
    hist.mkdir(exist_ok=True)
    info = {
        "time": dt.isoformat(),
        "topic": topic,
        "video_id": video_id,
    }
    (hist / f"{dt.date()}.json").write_text(
        json.dumps(info, ensure_ascii=False, indent=2),
        encoding="utf-8",
    )

# -----------------------------------------------------------
# 7. MAIN PIPELINE
# -----------------------------------------------------------

def pipeline():
    now = datetime.datetime.utcnow()
    topic = pick_new_topic()
    print("Topic:", topic)

    script = generate_script(topic)
    images, voice = make_assets(script)

    out = Path(tempfile.mktemp(suffix=".mp4"))
    print("Building video ‚Üí", out)
    build_video(images, voice, out, script)

    yt = yt_service()
    vid = upload_video(out, script, yt)
    print("üéâ Uploaded http://youtube.com/watch?v=" + vid)

    mark_done(topic, vid)
    save_history(topic, vid, now)

# -----------------------------------------------------------

if __name__ == "__main__":
    try:
        pipeline()
    except Exception as e:
        print("ERROR:", e)
        raise
